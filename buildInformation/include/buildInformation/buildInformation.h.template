/**
 * MIT License
 *
 * Copyright (c) 2018 Anurag Jakhotia
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
#pragma once

#include <string>
#include <ostream>
#include <stdexcept>

namespace cppYard
{
namespace buildInformation
{
/**
 * @breif	Provides enumerations for different types of build permitted by the build system. It is important
 * 			that the case of enumerations matches exactly with build systems's string representation of the build
 * 			type because string replacement will be used to assign value to an instance of this enum in the
 * 			@class BuildInformation class.
 */
enum class BuildType : size_t
{
	Debug = 0,
	Release = 1,
	RelWithDebInfo = 2,
	MinSizeRel = 3
};

/**
 * @brief	Gives the major version of the project at compile and run time.
 *
 * @return	Major version of the project.
 */
constexpr size_t ProjectMajorVersion() noexcept(true)
{
	return @PROJECT_VERSION_MAJOR@;
}

/**
 * @brief	Gives the minor version of the project at compile and run time.
 *
 * @return	Major version of the project.
 */
constexpr size_t ProjectMinorVersion() noexcept(true)
{
	return @PROJECT_VERSION_MINOR@;
}

/**
 * @brief	Gives the major version of the project at compile and run time.
 *
 * @return	Major version of the project.
 */
static constexpr size_t ProjectPatchVersion() noexcept(true)
{
	return @PROJECT_VERSION_PATCH@;
}

/**
 * @brief	Gives the major version of the project at compile and run time.
 *
 * @return	Major version of the project.
 */
constexpr size_t ProjectTweakVersion() noexcept(true)
{
	return @PROJECT_VERSION_TWEAK@;
}

/**
 * @breif	Gives the full version string of the build.
 *
 * @return	Full version of the project.
 */
constexpr const char* ProjectVersion() noexcept(true)
{
	return "@PROJECT_VERSION_MAJOR@.@PROJECT_VERSION_MINOR@.@PROJECT_VERSION_PATCH@.@PROJECT_VERSION_TWEAK@";
}

/**
 * @brief	Gives the build type of the project at compile and run time.
 *
 * @return	Build type of the project.
 */
constexpr BuildType ProjectBuildType() noexcept(true)
{
	return BuildType::@CMAKE_BUILD_TYPE@;
}

/**
 * @brief	Equality operator. Constexpr required that this operator be defined in the header.
 *
 * @param 	lhs		LHS build type.
 *
 * @param 	rhs		RHS build type.
 *
 * @return 	True if the operands are equal, false otherwise.
 */
constexpr bool operator==(const BuildType lhs, const BuildType rhs) noexcept(true)
{
	return static_cast<size_t>(lhs) == static_cast<size_t>(rhs);
}

/**
 * @brief	In-equality operator. Constexpr required that this operator be defined in the header.
 *
 * @param 	lhs		LHS build type.
 *
 * @param 	rhs		RHS build type.
 *
 * @return 	False if the operands are equal, true otherwise.
 */
constexpr bool operator!=(const BuildType lhs, const BuildType rhs) noexcept(true)
{
	return static_cast<size_t>(lhs) != static_cast<size_t>(rhs);
}


/**
 * @bried	Stream insertion operator for build type enumerations.
 * @param	stream		Stream to insert the strings into. The stream is modified.
 * @param	buildType	Build type
 * @return	Stream with the build type inserted.
 */
std::ostream& operator<<(std::ostream& stream, const BuildType& buildType);

} // End of namespace buildInformation.
} // End of namespace cppYard.