/**
 * MIT License
 *
 * Copyright (c) 2018 Anurag Jakhotia
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#include <buildInformation/buildInformation.h>
#include <gtest/gtest.h>

namespace cppYard
{
namespace buildInformation
{

/** Set to major version of the software by the build system. */
constexpr const size_t expectedMajorVersion = @PROJECT_VERSION_MAJOR@;

/** Set to major version of the software by the build system. */
constexpr const size_t expectedMinorVersion = @PROJECT_VERSION_MINOR@;

/** Set to major version of the software by the build system. */
constexpr const size_t expectedPatchVersion = @PROJECT_VERSION_PATCH@;

/** Set to major version of the software by the build system. */
constexpr const size_t expectedTweakVersion = @PROJECT_VERSION_TWEAK@;

/** Set to the version string by the build system. */
constexpr const char* const expectedVersion =
		"@PROJECT_VERSION_MAJOR@.@PROJECT_VERSION_MINOR@.@PROJECT_VERSION_PATCH@.@PROJECT_VERSION_TWEAK@";

/** Set to the build type of the project by the build system. */
constexpr const BuildType expectedBuildType = BuildType::@CMAKE_BUILD_TYPE@;

TEST(BuildInformation, MajorVersion)
{
	static_assert(expectedMajorVersion == ProjectMajorVersion(),
				  "Mis-match in project major version");
}

TEST(BuildInformation, MinorVersion)
{
	static_assert(expectedMinorVersion == ProjectMinorVersion(),
				  "Mis-match in project minor version");
}

TEST(BuildInformation, PatchVersion)
{
	static_assert(expectedPatchVersion == ProjectPatchVersion(),
				  "Mis-match in project patch version");
}

TEST(BuildInformation, TweakVersion)
{
	static_assert(expectedTweakVersion == ProjectTweakVersion(),
				  "Mis-match in project tweak version");
}

TEST(BuildInformation, Version)
{
	EXPECT_EQ(expectedVersion, ProjectVersion());
}

TEST(BuildInformation, BuildType)
{
	static_assert(expectedBuildType == ProjectBuildType(),
				  "Mis-match in project build type");
}

TEST(BuildInformation, EqualityOperator)
{
	EXPECT_TRUE(BuildType::Debug == BuildType::Debug);
	EXPECT_FALSE(BuildType::Debug == BuildType::Release);
	EXPECT_FALSE(BuildType::Debug == BuildType::RelWithDebInfo);
	EXPECT_FALSE(BuildType::Debug == BuildType::MinSizeRel);

	EXPECT_TRUE(BuildType::Release == BuildType::Release);
	EXPECT_FALSE(BuildType::Release == BuildType::RelWithDebInfo);
	EXPECT_FALSE(BuildType::Release == BuildType::MinSizeRel);

	EXPECT_TRUE(BuildType::RelWithDebInfo == BuildType::RelWithDebInfo);
	EXPECT_FALSE(BuildType::RelWithDebInfo == BuildType::MinSizeRel);

	EXPECT_TRUE(BuildType::MinSizeRel == BuildType::MinSizeRel);
}

TEST(BuildInformation, InEqualityOperator)
{
	EXPECT_FALSE(BuildType::Debug != BuildType::Debug);
	EXPECT_TRUE(BuildType::Debug != BuildType::Release);
	EXPECT_TRUE(BuildType::Debug != BuildType::RelWithDebInfo);
	EXPECT_TRUE(BuildType::Debug != BuildType::MinSizeRel);

	EXPECT_FALSE(BuildType::Release != BuildType::Release);
	EXPECT_TRUE(BuildType::Release != BuildType::RelWithDebInfo);
	EXPECT_TRUE(BuildType::Release != BuildType::MinSizeRel);

	EXPECT_FALSE(BuildType::RelWithDebInfo != BuildType::RelWithDebInfo);
	EXPECT_TRUE(BuildType::RelWithDebInfo != BuildType::MinSizeRel);

	EXPECT_FALSE(BuildType::MinSizeRel != BuildType::MinSizeRel);
}

} // End of namespace buildInformation.
} // End of namespace cppYard.